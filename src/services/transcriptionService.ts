import { ApiResponse } from '../types';
import { API_CONFIG } from '../config/api';

// Configuration de l'API AssemblyAI pour la transcription
const ASSEMBLY_AI_CONFIG = {
  ENABLED: true, // Forcer l'activation
  TOKEN: '585cf224714c4bb4972be9a25b7b0c9b', // Cl√© API directe
  UPLOAD_URL: 'https://api.assemblyai.com/v2/upload',
  TRANSCRIPT_URL: 'https://api.assemblyai.com/v2/transcript',
  TIMEOUT: parseInt(process.env.REACT_APP_TRANSCRIPTION_TIMEOUT || '30000')
};

declare global {
  interface Window {
    SpeechRecognition: any;
    webkitSpeechRecognition: any;
  }
}

class TranscriptionService {
  // M√©thode 1: AssemblyAI API (transcription de haute qualit√©)
  async transcribeWithAssemblyAI(audioBlob: Blob): Promise<ApiResponse> {
    try {
      console.log('üé§ D√©but de la transcription avec AssemblyAI...');

      // √âtape 1: Upload du fichier audio
      const uploadResponse = await fetch(ASSEMBLY_AI_CONFIG.UPLOAD_URL, {
        method: 'POST',
        headers: {
          'Authorization': ASSEMBLY_AI_CONFIG.TOKEN,
          'Content-Type': 'application/octet-stream'
        },
        body: audioBlob,
        signal: AbortSignal.timeout(ASSEMBLY_AI_CONFIG.TIMEOUT)
      });

      if (!uploadResponse.ok) {
        throw new Error(`Erreur upload AssemblyAI: ${uploadResponse.status}`);
      }

      const uploadResult = await uploadResponse.json();
      console.log('üì§ Fichier upload√©:', uploadResult.upload_url);

      // √âtape 2: Demander la transcription
      const transcriptResponse = await fetch(ASSEMBLY_AI_CONFIG.TRANSCRIPT_URL, {
        method: 'POST',
        headers: {
          'Authorization': ASSEMBLY_AI_CONFIG.TOKEN,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          audio_url: uploadResult.upload_url,
          language_code: 'fr'
        }),
        signal: AbortSignal.timeout(ASSEMBLY_AI_CONFIG.TIMEOUT)
      });

      if (!transcriptResponse.ok) {
        throw new Error(`Erreur transcription AssemblyAI: ${transcriptResponse.status}`);
      }

      const transcriptResult = await transcriptResponse.json();
      console.log('üìù Transcription demand√©e:', transcriptResult.id);

      // √âtape 3: Polling pour obtenir le r√©sultat
      const pollUrl = `${ASSEMBLY_AI_CONFIG.TRANSCRIPT_URL}/${transcriptResult.id}`;
      let finalResult = null;
      let attempts = 0;
      const maxAttempts = 30; // 30 secondes max

      while (attempts < maxAttempts) {
        await new Promise(resolve => setTimeout(resolve, 3000)); // Attendre 3 secondes comme dans l'exemple PHP

        const pollResponse = await fetch(pollUrl, {
          headers: {
            'Authorization': ASSEMBLY_AI_CONFIG.TOKEN
          }
        });

        if (!pollResponse.ok) {
          throw new Error(`Erreur polling AssemblyAI: ${pollResponse.status}`);
        }

        finalResult = await pollResponse.json();
        console.log('üìä Statut transcription:', finalResult.status);

        if (finalResult.status === 'completed') {
          break;
        } else if (finalResult.status === 'error') {
          throw new Error(`Erreur transcription: ${finalResult.error}`);
        }

        attempts++;
      }

      if (!finalResult || finalResult.status !== 'completed') {
        throw new Error('Timeout de la transcription');
      }

      console.log('‚úÖ Transcription AssemblyAI r√©ussie');
      return {
        success: true,
        data: { transcription: finalResult.text }
      };

    } catch (error) {
      console.error('‚ùå Erreur AssemblyAI:', error);
      throw error;
    }
  }

  // M√©thode principale qui essaie toutes les options
  async transcribeAudio(audioBlob: Blob): Promise<ApiResponse> {
    console.log('üîç D√©but de la transcription audio');
    console.log('üìã Configuration:', {
      ASSEMBLY_AI_ENABLED: ASSEMBLY_AI_CONFIG.ENABLED,
      TRANSCRIPTION_METHOD: API_CONFIG.GENERAL.TRANSCRIPTION_METHOD
    });

    // Si AssemblyAI est activ√©, l'utiliser
    if (ASSEMBLY_AI_CONFIG.ENABLED && ASSEMBLY_AI_CONFIG.TOKEN) {
      console.log('üé§ Utilisation d\'AssemblyAI');
      try {
        const result = await this.transcribeWithAssemblyAI(audioBlob);
        console.log('‚úÖ Transcription AssemblyAI r√©ussie');
        return result;
      } catch (error) {
        console.error('‚ùå Erreur AssemblyAI:', error);
        // Fallback vers mock en cas d'erreur
        console.log('üé≠ Fallback vers Mock API...');
        return await this.transcribeWithMock(audioBlob);
      }
    }

    // Si le mode d√©mo est activ√©
    if (API_CONFIG.GENERAL.DEMO_MODE) {
      console.log('üé≠ Mode d√©mo activ√© - utilisation de la transcription simul√©e');
      return this.transcribeWithMock(audioBlob);
    }

    // Fallback vers mock si rien d'autre n'est configur√©
    console.log('üé≠ Aucune API configur√©e - utilisation du mode d√©mo');
    return await this.transcribeWithMock(audioBlob);
  }

  // M√©thode Mock (fallback)
  async transcribeWithMock(audioBlob: Blob): Promise<ApiResponse> {
    // Simulation d'un d√©lai de traitement
    await new Promise(resolve => setTimeout(resolve, 1000));

    const mockTranscriptions = [
      "J'√©tais dans une for√™t myst√©rieuse, entour√© d'arbres qui semblaient vivants. Le vent soufflait doucement et j'entendais des voix lointaines qui m'appelaient.",
      "Je volais au-dessus d'une ville futuriste, avec des b√¢timents qui touchaient les nuages. Les lumi√®res brillaient de toutes les couleurs imaginables.",
      "Je me trouvais dans une maison que je ne reconnaissais pas, mais qui me semblait famili√®re. Chaque pi√®ce me menait vers une nouvelle d√©couverte.",
      "J'√©tais sur une plage d√©serte au coucher du soleil. Les vagues √©taient calmes et j'avais l'impression d'√™tre seul au monde.",
      "Je courais dans un labyrinthe infini, avec des murs qui changeaient constamment. Je savais qu'il y avait quelque chose d'important √† trouver au centre."
    ];

    const randomTranscription = mockTranscriptions[Math.floor(Math.random() * mockTranscriptions.length)];

    return {
      success: true,
      data: { transcription: randomTranscription }
    };
  }

  // V√©rifier la disponibilit√© des APIs
  async checkAPIAvailability(): Promise<{
    assemblyAI: boolean;
    mock: boolean;
  }> {
    // V√©rifier si AssemblyAI est configur√©
    console.log('üîç Configuration AssemblyAI:', {
      TOKEN: ASSEMBLY_AI_CONFIG.TOKEN ? 'PR√âSENT' : 'ABSENT',
      ENABLED: ASSEMBLY_AI_CONFIG.ENABLED,
      TOKEN_LENGTH: ASSEMBLY_AI_CONFIG.TOKEN?.length || 0
    });

    const assemblyAI = !!(ASSEMBLY_AI_CONFIG.ENABLED && ASSEMBLY_AI_CONFIG.TOKEN);
    const mock = true; // Toujours disponible comme fallback

    console.log('üîç V√©rification des APIs:', {
      assemblyAI,
      mock,
      TOKEN_EXISTS: !!ASSEMBLY_AI_CONFIG.TOKEN,
      ENABLED: ASSEMBLY_AI_CONFIG.ENABLED
    });

    return { assemblyAI, mock };
  }
}

const transcriptionService = new TranscriptionService();
export default transcriptionService; 