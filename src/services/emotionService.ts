import { Emotion, ApiResponse } from '../types';

// Configuration de l'API Mistral AI pour l'analyse d'√©motion
const MISTRAL_CONFIG = {
  ENABLED: process.env.REACT_APP_MISTRAL_ENABLED === 'true',
  API_KEY: process.env.REACT_APP_MISTRAL_API_KEY || '',
  MODEL: 'mistral-large-latest',
  URL: 'https://api.mistral.ai/v1/chat/completions',
  TIMEOUT: parseInt(process.env.REACT_APP_EMOTION_TIMEOUT || '15000')
};

// Mapping des √©motions d√©tect√©es par Mistral vers nos √©motions
const mistralToEmotion: { [key: string]: Emotion } = {
  'joyeux': 'joyeux',
  'heureux': 'joyeux',
  'joyful': 'joyeux',
  'happy': 'joyeux',
  'stressant': 'stressant',
  'stress√©': 'stressant',
  'stressful': 'stressant',
  'anxieux': 'stressant',
  'anxious': 'stressant',
  'neutre': 'neutre',
  'neutral': 'neutre',
  'paisible': 'paisible',
  'calme': 'paisible',
  'peaceful': 'paisible',
  'myst√©rieux': 'myst√©rieux',
  'mysterious': 'myst√©rieux',
  'intense': 'intense',
  'passionn√©': 'intense',
  'passionate': 'intense'
};

// Mots-cl√©s pour affiner l'analyse d'√©motion (fallback)
const emotionKeywords = {
  myst√©rieux: ['myst√©rieux', '√©trange', 'inconnu', 'secret', 'cach√©', 'obscur', '√©nigmatique'],
  paisible: ['calme', 'tranquille', 'serein', 'paisible', 'doux', 'apaisant', 'zen'],
  intense: ['intense', 'puissant', 'vif', 'dramatique', 'passionn√©', '√©nergique', 'dynamique']
};

class EmotionService {
  private async analyzeWithMistral(text: string): Promise<Emotion> {
    try {
      console.log('üß† Analyse d\'√©motion avec Mistral AI...');
      
      const prompt = `Analyse l'√©motion dominante dans ce r√™ve d√©crit en fran√ßais. 
      
R√™ve: "${text}"

R√©ponds UNIQUEMENT avec l'une de ces √©motions (en fran√ßais):
- joyeux (pour les r√™ves positifs, heureux, color√©s, amusants)
- stressant (pour les r√™ves angoissants, effrayants, n√©gatifs)
- neutre (pour les r√™ves sans √©motion particuli√®re)
- paisible (pour les r√™ves calmes, sereins, apaisants)
- myst√©rieux (pour les r√™ves √©tranges, √©nigmatiques, myst√©rieux)
- intense (pour les r√™ves passionn√©s, dramatiques, puissants)

√âmotion d√©tect√©e:`;

      const response = await fetch(MISTRAL_CONFIG.URL, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${MISTRAL_CONFIG.API_KEY}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          model: MISTRAL_CONFIG.MODEL,
          messages: [
            {
              role: 'user',
              content: prompt
            }
          ],
          max_tokens: 50,
          temperature: 0.3
        }),
        signal: AbortSignal.timeout(MISTRAL_CONFIG.TIMEOUT)
      });

      if (!response.ok) {
        throw new Error(`Erreur API Mistral: ${response.status}`);
      }

      const result = await response.json();
      console.log('üìä R√©sultat Mistral:', result);

      // Extraire l'√©motion de la r√©ponse
      let emotion: Emotion = 'neutre';
      
      if (result.choices && result.choices[0] && result.choices[0].message) {
        const responseText = result.choices[0].message.content.toLowerCase().trim();
        console.log('üé≠ R√©ponse Mistral:', responseText);

        // Chercher l'√©motion dans la r√©ponse
        for (const [emotionKey, emotionValue] of Object.entries(mistralToEmotion)) {
          if (responseText.includes(emotionKey.toLowerCase())) {
            emotion = emotionValue;
            break;
          }
        }
      }

      // Fallback avec analyse de mots-cl√©s si Mistral n'a pas donn√© de r√©ponse claire
      if (emotion === 'neutre') {
        const textLower = text.toLowerCase();
        for (const [emotionType, keywords] of Object.entries(emotionKeywords)) {
          if (keywords.some(keyword => textLower.includes(keyword))) {
            emotion = emotionType as Emotion;
            break;
          }
        }
      }

      console.log('üé≠ √âmotion d√©tect√©e par Mistral:', emotion);
      return emotion;

    } catch (error) {
      console.error('‚ùå Erreur Mistral:', error);
      throw error;
    }
  }

  private async analyzeWithMock(text: string): Promise<Emotion> {
    console.log('üé≠ Utilisation de l\'analyse d\'√©motion simul√©e');
    
    // Simulation d'un d√©lai de traitement
    await new Promise(resolve => setTimeout(resolve, 1000));

    // Analyse simple bas√©e sur les mots-cl√©s
    const textLower = text.toLowerCase();
    
    // V√©rifier les mots-cl√©s sp√©cifiques
    for (const [emotionType, keywords] of Object.entries(emotionKeywords)) {
      if (keywords.some(keyword => textLower.includes(keyword))) {
        return emotionType as Emotion;
      }
    }

    // Analyse basique du sentiment
    const positiveWords = ['bon', 'beau', 'heureux', 'joie', 'amour', 'sourire', 'lumi√®re', 'couleur'];
    const negativeWords = ['mauvais', 'peur', 'angoisse', 'sombre', 'danger', 'courir', 'perdu', 'stress'];
    
    const positiveCount = positiveWords.filter(word => textLower.includes(word)).length;
    const negativeCount = negativeWords.filter(word => textLower.includes(word)).length;

    if (positiveCount > negativeCount) {
      return 'joyeux';
    } else if (negativeCount > positiveCount) {
      return 'stressant';
    } else {
      return 'neutre';
    }
  }

  async analyzeEmotion(text: string): Promise<ApiResponse> {
    console.log('üîç D√©but de l\'analyse d\'√©motion');
    console.log('üìù Texte √† analyser:', text);

    try {
      let emotion: Emotion;

      // Utiliser Mistral AI si configur√©
      if (MISTRAL_CONFIG.ENABLED && MISTRAL_CONFIG.API_KEY) {
        try {
          emotion = await this.analyzeWithMistral(text);
        } catch (error) {
          console.error('‚ùå Erreur Mistral, fallback vers mock:', error);
          emotion = await this.analyzeWithMock(text);
        }
      } else {
        // Utiliser l'analyse simul√©e
        emotion = await this.analyzeWithMock(text);
      }

      return {
        success: true,
        data: { emotion }
      };

    } catch (error) {
      console.error('üí• Erreur analyse d\'√©motion:', error);
      return {
        success: false,
        error: 'Erreur lors de l\'analyse d\'√©motion'
      };
    }
  }

  // V√©rifier la disponibilit√© de l'API
  async checkAvailability(): Promise<boolean> {
    if (!MISTRAL_CONFIG.ENABLED || !MISTRAL_CONFIG.API_KEY) {
      console.log('‚ùå Mistral AI non configur√©');
      return false;
    }

    try {
      const response = await fetch(MISTRAL_CONFIG.URL, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${MISTRAL_CONFIG.API_KEY}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          model: MISTRAL_CONFIG.MODEL,
          messages: [
            {
              role: 'user',
              content: 'Test de connexion'
            }
          ],
          max_tokens: 10
        }),
        signal: AbortSignal.timeout(5000)
      });

      const isAvailable = response.ok;
      console.log('‚úÖ Mistral AI disponible:', isAvailable);
      return isAvailable;
    } catch (error) {
      console.error('‚ùå API Mistral non disponible:', error);
      return false;
    }
  }
}

const emotionService = new EmotionService();
export default emotionService; 